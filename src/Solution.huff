/*
  function collatzIteration(uint256 n) public pure override returns (uint256) {
    if (n % 2 == 0) {
      return n / 2;
    } else {
      return 3 * n + 1;
    }
  }
*/

// Function dispatching skipped for compact code size
#define macro MAIN() = takes (0) returns (0) {
    0x04 calldataload // [n]

    // Push an extra n onto the stack for future computation
    0x02 dup2 // [n, 2, n]

    // Test if n % 2 == 0
    mod // [n % 2, n]
    iszero // [n % 2 == 0, n]

    // Jump to the "even" case if n % 2 == 0
    even jumpi

    // Otherwise, n is odd
    0x06 mul // [6 * n]
    0x02 add // [6 * n + 2]
    
    // Handle the case when n is even
    even:
        0x02 swap1 div // [n / 2]
    // Return logic
    ret:
        0x00 mstore // Store the top element from the stack in memory offset 0x00
        0x20 0x00 return // Return 32 bytes from offset 0x00
}